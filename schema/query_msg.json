{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "simulate_swap_operations"
      ],
      "properties": {
        "simulate_swap_operations": {
          "type": "object",
          "required": [
            "offer_amount",
            "operations"
          ],
          "properties": {
            "offer_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "operations": {
              "$ref": "#/definitions/SwapOperationsListBase_for_String"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns all the current path for a given (offer_asset, ask_asset) pair.",
      "type": "object",
      "required": [
        "paths_for_pair"
      ],
      "properties": {
        "paths_for_pair": {
          "type": "object",
          "required": [
            "ask_asset",
            "offer_asset"
          ],
          "properties": {
            "ask_asset": {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            },
            "offer_asset": {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "finds the best path for a given (offer_asset, ask_asset) pair. if no path is found, returns None.",
      "type": "object",
      "required": [
        "best_path_for_pair"
      ],
      "properties": {
        "best_path_for_pair": {
          "type": "object",
          "required": [
            "ask_asset",
            "offer_amount",
            "offer_asset"
          ],
          "properties": {
            "ask_asset": {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            },
            "exclude_paths": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "offer_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "offer_asset": {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns all the assets from which there are paths to a given ask asset.",
      "type": "object",
      "required": [
        "supported_offer_assets"
      ],
      "properties": {
        "supported_offer_assets": {
          "type": "object",
          "required": [
            "ask_asset"
          ],
          "properties": {
            "ask_asset": {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns all the assets to which there are paths from a given offer asset.",
      "type": "object",
      "required": [
        "supported_ask_assets"
      ],
      "properties": {
        "supported_ask_assets": {
          "type": "object",
          "required": [
            "offer_asset"
          ],
          "properties": {
            "offer_asset": {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetInfoBase_for_String": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Pool": {
      "description": "An enum with all known variants that implement the Pool trait. The ideal solution would of course instead be to use a trait object so that the caller can pass in any type that implements the Pool trait, but trait objects require us not to implement the Sized trait, which cw_serde requires.",
      "type": "string",
      "enum": []
    },
    "SwapOperationBase_for_String": {
      "type": "object",
      "required": [
        "ask_asset_info",
        "offer_asset_info",
        "pool"
      ],
      "properties": {
        "ask_asset_info": {
          "$ref": "#/definitions/AssetInfoBase_for_String"
        },
        "offer_asset_info": {
          "$ref": "#/definitions/AssetInfoBase_for_String"
        },
        "pool": {
          "$ref": "#/definitions/Pool"
        }
      },
      "additionalProperties": false
    },
    "SwapOperationsListBase_for_String": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SwapOperationBase_for_String"
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
